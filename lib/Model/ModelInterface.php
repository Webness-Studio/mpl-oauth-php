<?php
/**
 * ModelInterface
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebnessStudio\MPL\OAuth\Model
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OAuth2
 *
 * Az alábbi eszköz szándékosan kihagyja az authorizációs végpontot, így biztosítva gyakorlási lehetőséget a token lekérésére. /  This document omits authorization endpoint on purpose, to provide a chance to practice obtaining an access token.  Idézet innen: / Quote from: [RFC 6749 - The OAuth2.0 Authorization Framework - 2.3.1. Client Password](https://tools.ietf.org/html/rfc6749#section-2.3.1): * Az api kulcsok (key, secret) használata a request-body-ban **NEM ENGEDÉLYEZETT**.    / Including the client credentials in the request-body using the two parameters is **NOT ALLOWED**. * A `grant_type=client_credentials` paraméter csak a request body-ban megengedett, **NEM LEHET** a request URI-ban.    / The parameter `grant_type=client_credentials` can only be transmitted in the request-body and **MUST NOT** be included in the request URI.  Az API a következő URL-eken érhető el: / This API can be accessed at the following URLs:  Környezet / Environment | API URL ----------------|------------- Sandbox | `https://sandbox.api.posta.hu/oauth2`  Production | `https://core.api.posta.hu/oauth2`   Az API ezen az oldalon a Sandbox környezetben tesztelhető. / You can test the API on this page in the Sandbox environment.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebnessStudio\MPL\OAuth\Model;

/**
 * Interface abstracting model access.
 *
 * @package WebnessStudio\MPL\OAuth\Model
 * @author  OpenAPI Generator team
 */
interface ModelInterface
{
    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName();

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes();

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats();

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     *
     * @return array
     */
    public static function attributeMap();

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters();

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters();

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array
     */
    public function listInvalidProperties();

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool
     */
    public function valid();

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool;

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool;
}
