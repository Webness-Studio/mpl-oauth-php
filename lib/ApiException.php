<?php
/**
 * ApiException
 * PHP version 7.4
 *
 * @category Class
 * @package  WebnessStudio\MPL\OAuth
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OAuth2
 *
 * Az alábbi eszköz szándékosan kihagyja az authorizációs végpontot, így biztosítva gyakorlási lehetőséget a token lekérésére. /  This document omits authorization endpoint on purpose, to provide a chance to practice obtaining an access token.  Idézet innen: / Quote from: [RFC 6749 - The OAuth2.0 Authorization Framework - 2.3.1. Client Password](https://tools.ietf.org/html/rfc6749#section-2.3.1): * Az api kulcsok (key, secret) használata a request-body-ban **NEM ENGEDÉLYEZETT**.    / Including the client credentials in the request-body using the two parameters is **NOT ALLOWED**. * A `grant_type=client_credentials` paraméter csak a request body-ban megengedett, **NEM LEHET** a request URI-ban.    / The parameter `grant_type=client_credentials` can only be transmitted in the request-body and **MUST NOT** be included in the request URI.  Az API a következő URL-eken érhető el: / This API can be accessed at the following URLs:  Környezet / Environment | API URL ----------------|------------- Sandbox | `https://sandbox.api.posta.hu/oauth2`  Production | `https://core.api.posta.hu/oauth2`   Az API ezen az oldalon a Sandbox környezetben tesztelhető. / You can test the API on this page in the Sandbox environment.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebnessStudio\MPL\OAuth;

use \Exception;

/**
 * ApiException Class Doc Comment
 *
 * @category Class
 * @package  WebnessStudio\MPL\OAuth
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ApiException extends Exception
{
    /**
     * The HTTP body of the server response either as Json or string.
     *
     * @var \stdClass|string|null
     */
    protected $responseBody;

    /**
     * The HTTP header of the server response.
     *
     * @var string[]|null
     */
    protected $responseHeaders;

    /**
     * The deserialized response object
     *
     * @var \stdClass|string|null
     */
    protected $responseObject;

    /**
     * Constructor
     *
     * @param string                $message         Error message
     * @param int                   $code            HTTP status code
     * @param string[]|null         $responseHeaders HTTP response header
     * @param \stdClass|string|null $responseBody    HTTP decoded body of the server response either as \stdClass or string
     */
    public function __construct($message = "", $code = 0, $responseHeaders = [], $responseBody = null)
    {
        parent::__construct($message, $code);
        $this->responseHeaders = $responseHeaders;
        $this->responseBody = $responseBody;
    }

    /**
     * Gets the HTTP response header
     *
     * @return string[]|null HTTP response header
     */
    public function getResponseHeaders()
    {
        return $this->responseHeaders;
    }

    /**
     * Gets the HTTP body of the server response either as Json or string
     *
     * @return \stdClass|string|null HTTP body of the server response either as \stdClass or string
     */
    public function getResponseBody()
    {
        return $this->responseBody;
    }

    /**
     * Sets the deserialized response object (during deserialization)
     *
     * @param mixed $obj Deserialized response object
     *
     * @return void
     */
    public function setResponseObject($obj)
    {
        $this->responseObject = $obj;
    }

    /**
     * Gets the deserialized response object (during deserialization)
     *
     * @return mixed the deserialized response object
     */
    public function getResponseObject()
    {
        return $this->responseObject;
    }
}
